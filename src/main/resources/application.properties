# Spring Server Properties
server.port=8082

# Kafka Consumer Properties
spring.kafka.consumer.bootstrap-servers=localhost:9092
spring.kafka.consumer.group-id=character-roster-group
spring.kafka.consumer.auto-offset-reset=earliest
spring.kafka.consumer.key-deserializer=org.apache.kafka.common.serialization.StringDeserializer
spring.kafka.consumer.value-deserializer=org.springframework.kafka.support.serializer.JsonDeserializer
# Propiedades para JsonDeserializer
spring.kafka.consumer.properties.spring.json.trusted.packages=*
spring.kafka.consumer.properties.spring.json.value.default.type=com.xvclemente.dnd.dtos.events.AventuraCreadaEvent

# Kafka Producer Properties (para cuando MS2 publique sus propios eventos)
spring.kafka.producer.bootstrap-servers=localhost:9092
spring.kafka.producer.key-serializer=org.apache.kafka.common.serialization.StringSerializer
spring.kafka.producer.value-serializer=org.springframework.kafka.support.serializer.JsonSerializer

# Nombres de Topics
app.kafka.topic.aventuras-creadas=aventuras-topic
app.kafka.topic.participantes-listos=participantes-topic
app.kafka.topic.combate-resultados=combate-resultados-topic
app.kafka.topic.aventura-finalizada=aventura-finalizada-topic

# AWS Configuration for Local Development
spring.cloud.aws.region.static=us-east-1
# Apunta al endpoint de nuestro DynamoDB Local en Docker
spring.cloud.aws.dynamodb.endpoint=http://localhost:8000
# Usa el perfil de credenciales que creamos
spring.cloud.aws.credentials.profile.name=default

# Nombres de nuestras tablas de DynamoDB (para mantenerlos configurables)
app.dynamodb.table-name.personajes=dndms-personajes
app.dynamodb.table-name.enemigos=dndms-enemigos
